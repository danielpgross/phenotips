package org.phenotips.studies.family.internal;

import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;

/**
 * Tools for updating the SVG generated by the pedigree.
 */
public class SvgUpdater
{
    // fixme make local.
    private static final String CLOSING_LINK_TAG = "</a>";

    private static final int CLOSING_LINK_TAG_LENGTH = CLOSING_LINK_TAG.length();

    /**
     * Part of a URL that is 'guaranteed' to indicate that the URL leads to a patient record. Indicates the start of the
     * patient ID in the URL.
     */
    private static final String LINK_TOKEN = "data/P";

    private static final int LINK_TOKEN_LENGTH = LINK_TOKEN.length();

    private static final int PATIENT_ID_LENGTH = 7;

    public static String removeLinks(String svg, String currentPatientId)
    {
        Set<LinkHolder> links = SvgUpdater.findAllLinks(svg, new HashSet<LinkHolder>());
        try {
            links = SvgUpdater.parsePatientIds(links);
        } catch (Exception ex) {
            // shouldn't happen. Fail silently.
            return svg;
        }
        links = SvgUpdater.filterCurrentPatient(links, currentPatientId);
        return SvgUpdater.removeLinksFromSvg(links.iterator(), svg);
    }

    private static Set<LinkHolder> findAllLinks(String svg, Set<LinkHolder> links)
    {
        String linkStartTag = "<a";
        String remainingSvg = svg;
        int potentialStart = remainingSvg.indexOf(linkStartTag);
        while (potentialStart != -1) {
            int potentialEnd = remainingSvg.indexOf(CLOSING_LINK_TAG);
            if (potentialEnd != -1) {
                int nextSubstringStart = potentialEnd + CLOSING_LINK_TAG_LENGTH;
                String potentialContent = remainingSvg.substring(potentialStart, potentialEnd);
                // this check might be too simple for future purposes
                if (potentialContent.contains(LINK_TOKEN)) {
                    LinkHolder holder = new LinkHolder();
                    holder.startPosition = potentialStart;
                    holder.endPosition = nextSubstringStart;
                    holder.content = potentialContent;
                }
                remainingSvg = remainingSvg.substring(nextSubstringStart);
            } else {
                // todo. Maybe throw an error if end is not found.
                break;
            }
            potentialStart = remainingSvg.indexOf(linkStartTag);
        }
        return links;
    }

    private static Set<LinkHolder> parsePatientIds(Set<LinkHolder> links) throws Exception
    {
        for (LinkHolder holder : links) {
            // this could be done in findAllLinks for performance
            int tokenStart = holder.content.indexOf(LINK_TOKEN);
            if (tokenStart == -1) {
                throw new Exception("The link does not contain a patient ID");
            }
            int idStart = tokenStart + LINK_TOKEN_LENGTH - 1;
            String id = holder.content.substring(idStart, idStart + PATIENT_ID_LENGTH);
            holder.patientId = id;
        }
        return links;
    }

    private static Set<LinkHolder> filterCurrentPatient(Set<LinkHolder> links, String patientId)
    {
        for (LinkHolder holder : links) {
            if (org.apache.commons.lang3.StringUtils.equalsIgnoreCase(holder.patientId, patientId)) {
                links.remove(holder);
            }
        }
        return links;
    }

    private static String removeLinksFromSvg(Iterator<LinkHolder> links, String svg)
    {
        String parsedSvg = svg;
        if (links.hasNext()) {
            LinkHolder holder = links.next();
            parsedSvg = parsedSvg.substring(0, holder.startPosition) + parsedSvg.substring(holder.endPosition + 1);
        }
        return parsedSvg;
    }

    private static class LinkHolder
    {
        int startPosition;

        /** Includes the entire closing tag. */
        int endPosition;

        String content;

        String patientId;
    }

//    public static String changeCurrentUserStyle(String svg) {
//
//    }
//
//    public static String removeCurrentUserStyle(String svg) {
//
//    }
}
